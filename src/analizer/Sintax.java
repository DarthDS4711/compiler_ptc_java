
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Apr 07 23:02:47 CDT 2021
//----------------------------------------------------

package analizer;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Apr 07 23:02:47 CDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\004\000\002\002\004\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\004" +
    "\000\002\005\004\000\002\005\004\000\002\005\004\000" +
    "\002\005\004\000\002\003\010\000\002\003\012\000\002" +
    "\003\011\000\002\003\011\000\002\006\005\000\002\006" +
    "\003\000\002\006\004\000\002\006\004\000\002\004\004" +
    "\000\002\004\006\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\010\005\000\002\010\005\000\002" +
    "\010\007\000\002\010\007\000\002\010\004\000\002\011" +
    "\003\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\012\003\000\002\012\003\000" +
    "\002\013\005\000\002\013\005\000\002\013\003\000\002" +
    "\015\005\000\002\014\006\000\002\014\006\000\002\014" +
    "\006\000\002\014\006\000\002\016\003\000\002\016\003" +
    "\000\002\017\013\000\002\017\012\000\002\020\011\000" +
    "\002\020\010\000\002\021\011\000\002\021\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\022\005\015\006\020\007\022\010\017\011" +
    "\004\012\006\013\011\031\012\001\002\000\004\024\166" +
    "\001\002\000\024\002\uffff\005\uffff\006\uffff\007\uffff\010" +
    "\uffff\011\uffff\012\uffff\013\uffff\031\uffff\001\002\000\004" +
    "\024\155\001\002\000\030\002\uffcf\005\uffcf\006\uffcf\007" +
    "\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\025\uffcf\027\uffcf" +
    "\031\uffcf\001\002\000\026\002\uffc8\005\uffc8\006\uffc8\007" +
    "\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\027\uffc8\031\uffc8" +
    "\001\002\000\004\031\131\001\002\000\006\015\076\023" +
    "\040\001\002\000\024\002\ufffd\005\ufffd\006\ufffd\007\ufffd" +
    "\010\ufffd\011\ufffd\012\ufffd\013\ufffd\031\ufffd\001\002\000" +
    "\024\002\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe\011\ufffe" +
    "\012\ufffe\013\ufffe\031\ufffe\001\002\000\004\031\123\001" +
    "\002\000\024\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\031\ufffb\001\002\000\004\024" +
    "\072\001\002\000\004\024\063\001\002\000\024\002\ufffc" +
    "\005\ufffc\006\ufffc\007\ufffc\010\ufffc\011\ufffc\012\ufffc\013" +
    "\ufffc\031\ufffc\001\002\000\004\024\035\001\002\000\026" +
    "\002\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9\012" +
    "\uffc9\013\uffc9\027\uffc9\031\uffc9\001\002\000\024\002\000" +
    "\005\000\006\000\007\000\010\000\011\000\012\000\013" +
    "\000\031\000\001\002\000\024\002\032\005\015\006\020" +
    "\007\022\010\017\011\004\012\006\013\011\031\012\001" +
    "\002\000\024\002\ufff9\005\ufff9\006\ufff9\007\ufff9\010\ufff9" +
    "\011\ufff9\012\ufff9\013\ufff9\031\ufff9\001\002\000\024\002" +
    "\ufff7\005\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7" +
    "\013\ufff7\031\ufff7\001\002\000\024\002\ufff8\005\ufff8\006" +
    "\ufff8\007\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\031\ufff8" +
    "\001\002\000\024\002\ufff6\005\ufff6\006\ufff6\007\ufff6\010" +
    "\ufff6\011\ufff6\012\ufff6\013\ufff6\031\ufff6\001\002\000\004" +
    "\002\001\001\002\000\024\002\ufff5\005\ufff5\006\ufff5\007" +
    "\ufff5\010\ufff5\011\ufff5\012\ufff5\013\ufff5\031\ufff5\001\002" +
    "\000\024\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011" +
    "\ufffa\012\ufffa\013\ufffa\031\ufffa\001\002\000\004\031\037" +
    "\001\002\000\004\025\044\001\002\000\004\023\040\001" +
    "\002\000\006\031\043\032\041\001\002\000\044\002\uffd2" +
    "\005\uffd2\006\uffd2\007\uffd2\010\uffd2\011\uffd2\012\uffd2\013" +
    "\uffd2\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\025\uffd2" +
    "\027\uffd2\030\uffd2\031\uffd2\001\002\000\030\002\uffce\005" +
    "\uffce\006\uffce\007\uffce\010\uffce\011\uffce\012\uffce\013\uffce" +
    "\025\uffce\027\uffce\031\uffce\001\002\000\044\002\uffd3\005" +
    "\uffd3\006\uffd3\007\uffd3\010\uffd3\011\uffd3\012\uffd3\013\uffd3" +
    "\016\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\025\uffd3\027" +
    "\uffd3\030\uffd3\031\uffd3\001\002\000\004\026\045\001\002" +
    "\000\022\005\015\006\020\007\022\010\017\011\004\012" +
    "\006\027\050\031\012\001\002\000\022\005\ufff4\006\ufff4" +
    "\007\ufff4\010\ufff4\011\ufff4\012\ufff4\027\ufff4\031\ufff4\001" +
    "\002\000\022\005\015\006\020\007\022\010\017\011\004" +
    "\012\006\027\056\031\012\001\002\000\026\002\uffc4\005" +
    "\uffc4\006\uffc4\007\uffc4\010\uffc4\011\uffc4\012\uffc4\013\uffc4" +
    "\027\uffc4\031\uffc4\001\002\000\022\005\ufff0\006\ufff0\007" +
    "\ufff0\010\ufff0\011\ufff0\012\ufff0\027\ufff0\031\ufff0\001\002" +
    "\000\022\005\ufff3\006\ufff3\007\ufff3\010\ufff3\011\ufff3\012" +
    "\ufff3\027\ufff3\031\ufff3\001\002\000\022\005\ufff2\006\ufff2" +
    "\007\ufff2\010\ufff2\011\ufff2\012\ufff2\027\ufff2\031\ufff2\001" +
    "\002\000\022\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\027\ufff1\031\ufff1\001\002\000\022\005\uffef\006" +
    "\uffef\007\uffef\010\uffef\011\uffef\012\uffef\027\uffef\031\uffef" +
    "\001\002\000\026\002\uffc5\005\uffc5\006\uffc5\007\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\027\uffc5\031\uffc5\001\002" +
    "\000\022\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012" +
    "\uffec\027\uffec\031\uffec\001\002\000\022\005\uffee\006\uffee" +
    "\007\uffee\010\uffee\011\uffee\012\uffee\027\uffee\031\uffee\001" +
    "\002\000\022\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\027\uffed\031\uffed\001\002\000\022\005\uffeb\006" +
    "\uffeb\007\uffeb\010\uffeb\011\uffeb\012\uffeb\027\uffeb\031\uffeb" +
    "\001\002\000\004\031\037\001\002\000\004\025\065\001" +
    "\002\000\004\026\066\001\002\000\022\005\015\006\020" +
    "\007\022\010\017\011\004\012\006\027\070\031\012\001" +
    "\002\000\022\005\015\006\020\007\022\010\017\011\004" +
    "\012\006\027\071\031\012\001\002\000\026\002\uffc2\005" +
    "\uffc2\006\uffc2\007\uffc2\010\uffc2\011\uffc2\012\uffc2\013\uffc2" +
    "\027\uffc2\031\uffc2\001\002\000\026\002\uffc3\005\uffc3\006" +
    "\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3\013\uffc3\027\uffc3" +
    "\031\uffc3\001\002\000\006\031\075\032\041\001\002\000" +
    "\004\025\122\001\002\000\004\025\121\001\002\000\010" +
    "\015\076\023\040\025\uffd3\001\002\000\022\016\106\017" +
    "\100\020\077\021\107\022\101\024\102\031\043\032\041" +
    "\001\002\000\022\016\uffd6\017\uffd6\020\uffd6\021\uffd6\022" +
    "\uffd6\024\uffd6\031\uffd6\032\uffd6\001\002\000\022\016\uffd7" +
    "\017\uffd7\020\uffd7\021\uffd7\022\uffd7\024\uffd7\031\uffd7\032" +
    "\uffd7\001\002\000\022\016\uffd4\017\uffd4\020\uffd4\021\uffd4" +
    "\022\uffd4\024\uffd4\031\uffd4\032\uffd4\001\002\000\022\016" +
    "\106\017\100\020\077\021\107\022\101\024\102\031\043" +
    "\032\041\001\002\000\042\002\uffd1\005\uffd1\006\uffd1\007" +
    "\uffd1\010\uffd1\011\uffd1\012\uffd1\013\uffd1\016\106\017\100" +
    "\020\077\021\107\022\101\025\uffd1\027\uffd1\031\uffd1\001" +
    "\002\000\006\031\043\032\041\001\002\000\030\002\uffd0" +
    "\005\uffd0\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013" +
    "\uffd0\025\uffd0\027\uffd0\031\uffd0\001\002\000\022\016\uffd8" +
    "\017\uffd8\020\uffd8\021\uffd8\022\uffd8\024\uffd8\031\uffd8\032" +
    "\uffd8\001\002\000\022\016\uffd5\017\uffd5\020\uffd5\021\uffd5" +
    "\022\uffd5\024\uffd5\031\uffd5\032\uffd5\001\002\000\032\002" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\025\uffd9\027\uffd9\030\uffd9\031\uffd9\001\002\000" +
    "\006\031\043\032\041\001\002\000\032\002\uffdc\005\uffdc" +
    "\006\uffdc\007\uffdc\010\uffdc\011\uffdc\012\uffdc\013\uffdc\025" +
    "\uffdc\027\uffdc\030\uffdc\031\uffdc\001\002\000\014\016\106" +
    "\017\100\020\077\021\107\022\101\001\002\000\004\025" +
    "\115\001\002\000\044\002\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\016\106\017\100\020" +
    "\077\021\107\022\101\025\uffdd\027\uffdd\030\uffdd\031\uffdd" +
    "\001\002\000\022\016\106\017\100\020\077\021\107\022" +
    "\101\024\102\031\043\032\117\001\002\000\044\002\uffdb" +
    "\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011\uffdb\012\uffdb\013" +
    "\uffdb\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022\uffd2\025\uffdb" +
    "\027\uffdb\030\uffdb\031\uffdb\001\002\000\032\002\uffda\005" +
    "\uffda\006\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda" +
    "\025\uffda\027\uffda\030\uffda\031\uffda\001\002\000\026\002" +
    "\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd\011\uffcd\012\uffcd" +
    "\013\uffcd\027\uffcd\031\uffcd\001\002\000\026\002\uffcb\005" +
    "\uffcb\006\uffcb\007\uffcb\010\uffcb\011\uffcb\012\uffcb\013\uffcb" +
    "\027\uffcb\031\uffcb\001\002\000\032\002\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\015\124" +
    "\027\uffe2\030\uffe2\031\uffe2\001\002\000\022\016\106\017" +
    "\100\020\077\021\107\022\101\024\102\031\126\032\127" +
    "\001\002\000\030\002\uffe1\005\uffe1\006\uffe1\007\uffe1\010" +
    "\uffe1\011\uffe1\012\uffe1\013\uffe1\027\uffe1\030\uffe1\031\uffe1" +
    "\001\002\000\042\002\uffdf\005\uffdf\006\uffdf\007\uffdf\010" +
    "\uffdf\011\uffdf\012\uffdf\013\uffdf\016\uffd3\017\uffd3\020\uffd3" +
    "\021\uffd3\022\uffd3\027\uffdf\030\uffdf\031\uffdf\001\002\000" +
    "\042\002\uffe0\005\uffe0\006\uffe0\007\uffe0\010\uffe0\011\uffe0" +
    "\012\uffe0\013\uffe0\016\uffd2\017\uffd2\020\uffd2\021\uffd2\022" +
    "\uffd2\027\uffe0\030\uffe0\031\uffe0\001\002\000\030\002\uffde" +
    "\005\uffde\006\uffde\007\uffde\010\uffde\011\uffde\012\uffde\013" +
    "\uffde\027\uffde\030\uffde\031\uffde\001\002\000\004\024\132" +
    "\001\002\000\012\014\136\025\137\030\133\031\135\001" +
    "\002\000\010\014\136\030\133\031\135\001\002\000\004" +
    "\025\147\001\002\000\012\014\136\025\uffe5\030\133\031" +
    "\135\001\002\000\004\031\144\001\002\000\004\026\140" +
    "\001\002\000\022\005\015\006\020\007\022\010\017\011" +
    "\004\012\006\027\142\031\012\001\002\000\022\005\015" +
    "\006\020\007\022\010\017\011\004\012\006\027\143\031" +
    "\012\001\002\000\024\002\uffea\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\013\uffea\031\uffea\001\002\000" +
    "\024\002\uffe8\005\uffe8\006\uffe8\007\uffe8\010\uffe8\011\uffe8" +
    "\012\uffe8\013\uffe8\031\uffe8\001\002\000\010\014\136\030" +
    "\133\031\135\001\002\000\004\025\uffe6\001\002\000\004" +
    "\025\uffe3\001\002\000\004\026\150\001\002\000\022\005" +
    "\015\006\020\007\022\010\017\011\004\012\006\027\152" +
    "\031\012\001\002\000\022\005\015\006\020\007\022\010" +
    "\017\011\004\012\006\027\153\031\012\001\002\000\024" +
    "\002\uffe7\005\uffe7\006\uffe7\007\uffe7\010\uffe7\011\uffe7\012" +
    "\uffe7\013\uffe7\031\uffe7\001\002\000\024\002\uffe9\005\uffe9" +
    "\006\uffe9\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\031" +
    "\uffe9\001\002\000\004\025\uffe4\001\002\000\004\005\015" +
    "\001\002\000\004\030\157\001\002\000\004\031\037\001" +
    "\002\000\004\025\161\001\002\000\004\026\162\001\002" +
    "\000\022\005\015\006\020\007\022\010\017\011\004\012" +
    "\006\027\164\031\012\001\002\000\022\005\015\006\020" +
    "\007\022\010\017\011\004\012\006\027\165\031\012\001" +
    "\002\000\026\002\uffc6\005\uffc6\006\uffc6\007\uffc6\010\uffc6" +
    "\011\uffc6\012\uffc6\013\uffc6\027\uffc6\031\uffc6\001\002\000" +
    "\026\002\uffc7\005\uffc7\006\uffc7\007\uffc7\010\uffc7\011\uffc7" +
    "\012\uffc7\013\uffc7\027\uffc7\031\uffc7\001\002\000\006\031" +
    "\075\032\041\001\002\000\004\025\172\001\002\000\004" +
    "\025\171\001\002\000\026\002\uffcc\005\uffcc\006\uffcc\007" +
    "\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc\027\uffcc\031\uffcc" +
    "\001\002\000\026\002\uffca\005\uffca\006\uffca\007\uffca\010" +
    "\uffca\011\uffca\012\uffca\013\uffca\027\uffca\031\uffca\001\002" +
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\026\002\024\003\023\004\004\013\013\014" +
    "\012\015\006\016\020\017\022\020\007\021\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\024\003\033\004\025\013\027\014\026" +
    "\015\006\016\032\017\022\020\007\021\030\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\015\035\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\012\041\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\045\005\046\013\051\014\052\015\006\016\053\017" +
    "\022\020\007\021\050\001\001\000\002\001\001\000\022" +
    "\004\054\013\057\014\060\015\006\016\061\017\022\020" +
    "\007\021\056\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\015" +
    "\063\001\001\000\002\001\001\000\002\001\001\000\024" +
    "\004\045\005\066\013\051\014\052\015\006\016\053\017" +
    "\022\020\007\021\050\001\001\000\022\004\054\013\057" +
    "\014\060\015\006\016\061\017\022\020\007\021\056\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\012\073" +
    "\013\072\015\006\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\010\104\011\103\012\102" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\113\011\103\012\112\001\001\000\004" +
    "\011\110\001\001\000\004\012\107\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\012\111\001\001\000\002\001\001\000\004\011" +
    "\110\001\001\000\002\001\001\000\004\011\115\001\001" +
    "\000\010\010\117\011\103\012\112\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\007\124\010\127\011\103\012" +
    "\112\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\006" +
    "\133\001\001\000\004\006\153\001\001\000\002\001\001" +
    "\000\004\006\145\001\001\000\002\001\001\000\002\001" +
    "\001\000\024\004\045\005\140\013\051\014\052\015\006" +
    "\016\053\017\022\020\007\021\050\001\001\000\022\004" +
    "\054\013\057\014\060\015\006\016\061\017\022\020\007" +
    "\021\056\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\006\144\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\045\005\150\013\051\014" +
    "\052\015\006\016\053\017\022\020\007\021\050\001\001" +
    "\000\022\004\054\013\057\014\060\015\006\016\061\017" +
    "\022\020\007\021\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\004\155\001\001\000" +
    "\002\001\001\000\004\015\157\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\004\045\005\162\013\051\014" +
    "\052\015\006\016\053\017\022\020\007\021\050\001\001" +
    "\000\022\004\054\013\057\014\060\015\006\016\061\017" +
    "\022\020\007\021\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\012\167\013\166\015\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // CONDITIONAL ::= If Parentesis_a OPERATION_BOOLEAN Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONDITIONAL ::= If Parentesis_a OPERATION_BOOLEAN Parentesis_c Llave_a BODY Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // WHILE ::= While Parentesis_a OPERATION_BOOLEAN Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // WHILE ::= While Parentesis_a OPERATION_BOOLEAN Parentesis_c Llave_a BODY Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR ::= For Parentesis_a DECLARATIONS Op_Separator OPERATION_BOOLEAN Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FOR ::= For Parentesis_a DECLARATIONS Op_Separator OPERATION_BOOLEAN Parentesis_c Llave_a BODY Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CICLOS ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CICLOS ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CONSOLA ::= Out Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSOLA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CONSOLA ::= In Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSOLA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CONSOLA ::= Out Parentesis_a VALUE Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSOLA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CONSOLA ::= In Parentesis_a VALUE Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSOLA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // OPERATION_BOOLEAN ::= Identificador Op_Relacional VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATION_BOOLEAN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXP ::= OPERATION_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXP ::= Identificador Operador_Igual OPERATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXP ::= Identificador Operador_Igual VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // VALUE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // VALUE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERATOR ::= Operador_Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERATOR ::= Operador_Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERATOR ::= Operador_Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERATOR ::= Operador_Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // OPERATOR ::= Operador_Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // OPERATION ::= OPERATOR VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // OPERATION ::= Parentesis_a OPERATION Parentesis_c OPERATOR OPERATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // OPERATION ::= Parentesis_a OPERATION Parentesis_c OPERATOR Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // OPERATION ::= VALUE OPERATOR VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // OPERATION ::= Parentesis_a OPERATION Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ASSIGN ::= OPERATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASSIGN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ASSIGN ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASSIGN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ASSIGN ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASSIGN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARATIONS ::= T_dato Identificador Operador_Igual ASSIGN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARATIONS ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // PARAMS ::= Identificador PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // PARAMS ::= Op_Separator PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // PARAMS ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // PARAMS ::= Operador_Referencia Identificador PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // FUNCION ::= Fun Identificador Parentesis_a PARAMS Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // FUNCION ::= Fun Identificador Parentesis_a Parentesis_c Llave_a BODY Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // FUNCION ::= Fun Identificador Parentesis_a PARAMS Parentesis_c Llave_a BODY Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // FUNCION ::= Fun Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BODY ::= BODY CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BODY ::= BODY CONDITIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BODY ::= BODY CONSOLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BODY ::= BODY EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BODY ::= BODY DECLARATIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BODY ::= CONDITIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BODY ::= CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BODY ::= CONSOLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // BODY ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // BODY ::= DECLARATIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= INICIO CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= INICIO CONDITIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= INICIO CONSOLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= INICIO EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= INICIO DECLARATIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= INICIO FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= CONDITIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= CONSOLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARATIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

