
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu May 20 12:34:03 CDT 2021
//----------------------------------------------------

package analizer;

import java_cup.runtime.Symbol;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu May 20 12:34:03 CDT 2021
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\103\000\002\002\004\000\002\002\003\000\002\002" +
    "\003\000\002\002\003\000\002\002\003\000\002\002\003" +
    "\000\002\002\003\000\002\002\003\000\002\002\004\000" +
    "\002\002\004\000\002\002\004\000\002\002\004\000\002" +
    "\002\004\000\002\002\004\000\002\002\004\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\005\003" +
    "\000\002\005\003\000\002\005\003\000\002\005\004\000" +
    "\002\005\004\000\002\005\004\000\002\005\004\000\002" +
    "\005\004\000\002\005\004\000\002\003\010\000\002\003" +
    "\012\000\002\003\011\000\002\003\011\000\002\006\006" +
    "\000\002\006\005\000\002\006\004\000\002\006\004\000" +
    "\002\006\005\000\002\004\004\000\002\004\006\000\002" +
    "\007\003\000\002\007\003\000\002\007\003\000\002\007" +
    "\003\000\002\010\005\000\002\010\005\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\011\003\000" +
    "\002\011\003\000\002\012\003\000\002\012\003\000\002" +
    "\012\003\000\002\013\005\000\002\013\005\000\002\013" +
    "\003\000\002\015\005\000\002\014\006\000\002\014\006" +
    "\000\002\014\006\000\002\016\003\000\002\016\003\000" +
    "\002\017\013\000\002\017\012\000\002\020\011\000\002" +
    "\020\010\000\002\021\011\000\002\021\010" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\030\005\021\006\025\007\027\010\023\011" +
    "\004\012\005\013\014\024\010\031\016\032\011\033\006" +
    "\001\002\000\004\024\167\001\002\000\004\024\156\001" +
    "\002\000\054\002\uffce\005\uffce\006\uffce\007\uffce\010\uffce" +
    "\011\uffce\012\uffce\013\uffce\016\uffce\017\uffce\020\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\025\uffce\027\uffce\030\uffce" +
    "\031\uffce\032\uffce\033\uffce\001\002\000\032\002\uffff\005" +
    "\uffff\006\uffff\007\uffff\010\uffff\011\uffff\012\uffff\013\uffff" +
    "\024\uffff\031\uffff\032\uffff\033\uffff\001\002\000\010\031" +
    "\046\032\011\033\006\001\002\000\054\002\uffcf\005\uffcf" +
    "\006\uffcf\007\uffcf\010\uffcf\011\uffcf\012\uffcf\013\uffcf\016" +
    "\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024\uffcf" +
    "\025\uffcf\027\uffcf\030\uffcf\031\uffcf\032\uffcf\033\uffcf\001" +
    "\002\000\036\002\uffcb\005\uffcb\006\uffcb\007\uffcb\010\uffcb" +
    "\011\uffcb\012\uffcb\013\uffcb\024\uffcb\025\uffcb\027\uffcb\031" +
    "\uffcb\032\uffcb\033\uffcb\001\002\000\034\002\uffc5\005\uffc5" +
    "\006\uffc5\007\uffc5\010\uffc5\011\uffc5\012\uffc5\013\uffc5\024" +
    "\uffc5\027\uffc5\031\uffc5\032\uffc5\033\uffc5\001\002\000\004" +
    "\031\126\001\002\000\016\016\121\017\114\020\117\021" +
    "\116\022\120\023\047\001\002\000\022\015\123\016\uffd0" +
    "\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\025\uffd0\001" +
    "\002\000\032\002\ufffe\005\ufffe\006\ufffe\007\ufffe\010\ufffe" +
    "\011\ufffe\012\ufffe\013\ufffe\024\ufffe\031\ufffe\032\ufffe\033" +
    "\ufffe\001\002\000\032\002\ufffc\005\ufffc\006\ufffc\007\ufffc" +
    "\010\ufffc\011\ufffc\012\ufffc\013\ufffc\024\ufffc\031\ufffc\032" +
    "\ufffc\033\ufffc\001\002\000\004\031\104\001\002\000\032" +
    "\002\ufffa\005\ufffa\006\ufffa\007\ufffa\010\ufffa\011\ufffa\012" +
    "\ufffa\013\ufffa\024\ufffa\031\ufffa\032\ufffa\033\ufffa\001\002" +
    "\000\004\024\101\001\002\000\032\002\ufffd\005\ufffd\006" +
    "\ufffd\007\ufffd\010\ufffd\011\ufffd\012\ufffd\013\ufffd\024\ufffd" +
    "\031\ufffd\032\ufffd\033\ufffd\001\002\000\004\024\072\001" +
    "\002\000\032\002\ufffb\005\ufffb\006\ufffb\007\ufffb\010\ufffb" +
    "\011\ufffb\012\ufffb\013\ufffb\024\ufffb\031\ufffb\032\ufffb\033" +
    "\ufffb\001\002\000\004\024\043\001\002\000\034\002\uffc6" +
    "\005\uffc6\006\uffc6\007\uffc6\010\uffc6\011\uffc6\012\uffc6\013" +
    "\uffc6\024\uffc6\027\uffc6\031\uffc6\032\uffc6\033\uffc6\001\002" +
    "\000\032\002\000\005\000\006\000\007\000\010\000\011" +
    "\000\012\000\013\000\024\000\031\000\032\000\033\000" +
    "\001\002\000\032\002\037\005\021\006\025\007\027\010" +
    "\023\011\004\012\005\013\014\024\010\031\016\032\011" +
    "\033\006\001\002\000\032\002\ufff8\005\ufff8\006\ufff8\007" +
    "\ufff8\010\ufff8\011\ufff8\012\ufff8\013\ufff8\024\ufff8\031\ufff8" +
    "\032\ufff8\033\ufff8\001\002\000\032\002\ufff6\005\ufff6\006" +
    "\ufff6\007\ufff6\010\ufff6\011\ufff6\012\ufff6\013\ufff6\024\ufff6" +
    "\031\ufff6\032\ufff6\033\ufff6\001\002\000\032\002\ufff7\005" +
    "\ufff7\006\ufff7\007\ufff7\010\ufff7\011\ufff7\012\ufff7\013\ufff7" +
    "\024\ufff7\031\ufff7\032\ufff7\033\ufff7\001\002\000\032\002" +
    "\ufff5\005\ufff5\006\ufff5\007\ufff5\010\ufff5\011\ufff5\012\ufff5" +
    "\013\ufff5\024\ufff5\031\ufff5\032\ufff5\033\ufff5\001\002\000" +
    "\004\002\001\001\002\000\032\002\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\024\ufff3\031" +
    "\ufff3\032\ufff3\033\ufff3\001\002\000\032\002\ufff4\005\ufff4" +
    "\006\ufff4\007\ufff4\010\ufff4\011\ufff4\012\ufff4\013\ufff4\024" +
    "\ufff4\031\ufff4\032\ufff4\033\ufff4\001\002\000\032\002\ufff9" +
    "\005\ufff9\006\ufff9\007\ufff9\010\ufff9\011\ufff9\012\ufff9\013" +
    "\ufff9\024\ufff9\031\ufff9\032\ufff9\033\ufff9\001\002\000\010" +
    "\031\046\032\011\033\006\001\002\000\004\025\051\001" +
    "\002\000\004\023\047\001\002\000\054\002\uffd0\005\uffd0" +
    "\006\uffd0\007\uffd0\010\uffd0\011\uffd0\012\uffd0\013\uffd0\016" +
    "\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0\024\uffd0" +
    "\025\uffd0\027\uffd0\030\uffd0\031\uffd0\032\uffd0\033\uffd0\001" +
    "\002\000\010\031\046\032\011\033\006\001\002\000\036" +
    "\002\uffca\005\uffca\006\uffca\007\uffca\010\uffca\011\uffca\012" +
    "\uffca\013\uffca\024\uffca\025\uffca\027\uffca\031\uffca\032\uffca" +
    "\033\uffca\001\002\000\004\026\052\001\002\000\030\005" +
    "\021\006\025\007\027\010\023\011\004\012\005\024\010" +
    "\027\054\031\016\032\011\033\006\001\002\000\030\005" +
    "\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\024\ufff2" +
    "\027\ufff2\031\ufff2\032\ufff2\033\ufff2\001\002\000\034\002" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\011\uffc1\012\uffc1" +
    "\013\uffc1\024\uffc1\027\uffc1\031\uffc1\032\uffc1\033\uffc1\001" +
    "\002\000\030\005\uffef\006\uffef\007\uffef\010\uffef\011\uffef" +
    "\012\uffef\024\uffef\027\uffef\031\uffef\032\uffef\033\uffef\001" +
    "\002\000\030\005\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1" +
    "\012\ufff1\024\ufff1\027\ufff1\031\ufff1\032\ufff1\033\ufff1\001" +
    "\002\000\030\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\024\uffed\027\uffed\031\uffed\032\uffed\033\uffed\001" +
    "\002\000\030\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0" +
    "\012\ufff0\024\ufff0\027\ufff0\031\ufff0\032\ufff0\033\ufff0\001" +
    "\002\000\030\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee" +
    "\012\uffee\024\uffee\027\uffee\031\uffee\032\uffee\033\uffee\001" +
    "\002\000\030\005\021\006\025\007\027\010\023\011\004" +
    "\012\005\024\010\027\064\031\016\032\011\033\006\001" +
    "\002\000\030\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec" +
    "\012\uffec\024\uffec\027\uffec\031\uffec\032\uffec\033\uffec\001" +
    "\002\000\034\002\uffc2\005\uffc2\006\uffc2\007\uffc2\010\uffc2" +
    "\011\uffc2\012\uffc2\013\uffc2\024\uffc2\027\uffc2\031\uffc2\032" +
    "\uffc2\033\uffc2\001\002\000\030\005\uffeb\006\uffeb\007\uffeb" +
    "\010\uffeb\011\uffeb\012\uffeb\024\uffeb\027\uffeb\031\uffeb\032" +
    "\uffeb\033\uffeb\001\002\000\030\005\uffea\006\uffea\007\uffea" +
    "\010\uffea\011\uffea\012\uffea\024\uffea\027\uffea\031\uffea\032" +
    "\uffea\033\uffea\001\002\000\030\005\uffe9\006\uffe9\007\uffe9" +
    "\010\uffe9\011\uffe9\012\uffe9\024\uffe9\027\uffe9\031\uffe9\032" +
    "\uffe9\033\uffe9\001\002\000\030\005\uffe7\006\uffe7\007\uffe7" +
    "\010\uffe7\011\uffe7\012\uffe7\024\uffe7\027\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\001\002\000\030\005\uffe8\006\uffe8\007\uffe8" +
    "\010\uffe8\011\uffe8\012\uffe8\024\uffe8\027\uffe8\031\uffe8\032" +
    "\uffe8\033\uffe8\001\002\000\010\031\046\032\011\033\006" +
    "\001\002\000\004\025\074\001\002\000\004\026\075\001" +
    "\002\000\030\005\021\006\025\007\027\010\023\011\004" +
    "\012\005\024\010\027\076\031\016\032\011\033\006\001" +
    "\002\000\034\002\uffbf\005\uffbf\006\uffbf\007\uffbf\010\uffbf" +
    "\011\uffbf\012\uffbf\013\uffbf\024\uffbf\027\uffbf\031\uffbf\032" +
    "\uffbf\033\uffbf\001\002\000\030\005\021\006\025\007\027" +
    "\010\023\011\004\012\005\024\010\027\100\031\016\032" +
    "\011\033\006\001\002\000\034\002\uffc0\005\uffc0\006\uffc0" +
    "\007\uffc0\010\uffc0\011\uffc0\012\uffc0\013\uffc0\024\uffc0\027" +
    "\uffc0\031\uffc0\032\uffc0\033\uffc0\001\002\000\010\031\046" +
    "\032\011\033\006\001\002\000\004\025\103\001\002\000" +
    "\034\002\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\011\uffc9" +
    "\012\uffc9\013\uffc9\024\uffc9\027\uffc9\031\uffc9\032\uffc9\033" +
    "\uffc9\001\002\000\040\002\uffdd\005\uffdd\006\uffdd\007\uffdd" +
    "\010\uffdd\011\uffdd\012\uffdd\013\uffdd\015\105\024\uffdd\027" +
    "\uffdd\030\uffdd\031\uffdd\032\uffdd\033\uffdd\001\002\000\012" +
    "\024\010\031\112\032\107\033\110\001\002\000\036\002" +
    "\uffd8\005\uffd8\006\uffd8\007\uffd8\010\uffd8\011\uffd8\012\uffd8" +
    "\013\uffd8\024\uffd8\027\uffd8\030\uffd8\031\uffd8\032\uffd8\033" +
    "\uffd8\001\002\000\050\002\uffdb\005\uffdb\006\uffdb\007\uffdb" +
    "\010\uffdb\011\uffdb\012\uffdb\013\uffdb\016\uffcf\017\uffcf\020" +
    "\uffcf\021\uffcf\022\uffcf\024\uffdb\027\uffdb\030\uffdb\031\uffdb" +
    "\032\uffdb\033\uffdb\001\002\000\050\002\uffda\005\uffda\006" +
    "\uffda\007\uffda\010\uffda\011\uffda\012\uffda\013\uffda\016\uffce" +
    "\017\uffce\020\uffce\021\uffce\022\uffce\024\uffda\027\uffda\030" +
    "\uffda\031\uffda\032\uffda\033\uffda\001\002\000\014\016\121" +
    "\017\114\020\117\021\116\022\120\001\002\000\050\002" +
    "\uffd9\005\uffd9\006\uffd9\007\uffd9\010\uffd9\011\uffd9\012\uffd9" +
    "\013\uffd9\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\024" +
    "\uffd9\027\uffd9\030\uffd9\031\uffd9\032\uffd9\033\uffd9\001\002" +
    "\000\036\002\uffdc\005\uffdc\006\uffdc\007\uffdc\010\uffdc\011" +
    "\uffdc\012\uffdc\013\uffdc\024\uffdc\027\uffdc\030\uffdc\031\uffdc" +
    "\032\uffdc\033\uffdc\001\002\000\010\031\uffd4\032\uffd4\033" +
    "\uffd4\001\002\000\010\031\046\032\011\033\006\001\002" +
    "\000\010\031\uffd2\032\uffd2\033\uffd2\001\002\000\010\031" +
    "\uffd3\032\uffd3\033\uffd3\001\002\000\010\031\uffd1\032\uffd1" +
    "\033\uffd1\001\002\000\010\031\uffd5\032\uffd5\033\uffd5\001" +
    "\002\000\040\002\uffd6\005\uffd6\006\uffd6\007\uffd6\010\uffd6" +
    "\011\uffd6\012\uffd6\013\uffd6\024\uffd6\025\uffd6\027\uffd6\030" +
    "\uffd6\031\uffd6\032\uffd6\033\uffd6\001\002\000\012\024\010" +
    "\031\046\032\011\033\006\001\002\000\036\002\uffcc\005" +
    "\uffcc\006\uffcc\007\uffcc\010\uffcc\011\uffcc\012\uffcc\013\uffcc" +
    "\024\uffcc\025\uffcc\027\uffcc\031\uffcc\032\uffcc\033\uffcc\001" +
    "\002\000\050\002\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\011\uffcd\012\uffcd\013\uffcd\016\121\017\114\020\117\021" +
    "\116\022\120\024\uffcd\025\uffcd\027\uffcd\031\uffcd\032\uffcd" +
    "\033\uffcd\001\002\000\004\024\127\001\002\000\012\005" +
    "\131\014\133\025\134\030\130\001\002\000\010\005\131" +
    "\014\133\030\130\001\002\000\004\031\151\001\002\000" +
    "\004\025\144\001\002\000\004\005\141\001\002\000\004" +
    "\026\135\001\002\000\030\005\021\006\025\007\027\010" +
    "\023\011\004\012\005\024\010\027\136\031\016\032\011" +
    "\033\006\001\002\000\032\002\uffe6\005\uffe6\006\uffe6\007" +
    "\uffe6\010\uffe6\011\uffe6\012\uffe6\013\uffe6\024\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\001\002\000\030\005\021\006\025\007" +
    "\027\010\023\011\004\012\005\024\010\027\140\031\016" +
    "\032\011\033\006\001\002\000\032\002\uffe4\005\uffe4\006" +
    "\uffe4\007\uffe4\010\uffe4\011\uffe4\012\uffe4\013\uffe4\024\uffe4" +
    "\031\uffe4\032\uffe4\033\uffe4\001\002\000\004\031\142\001" +
    "\002\000\012\005\131\014\133\025\uffe1\030\130\001\002" +
    "\000\004\025\uffe2\001\002\000\004\026\145\001\002\000" +
    "\030\005\021\006\025\007\027\010\023\011\004\012\005" +
    "\024\010\027\146\031\016\032\011\033\006\001\002\000" +
    "\032\002\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011\uffe3" +
    "\012\uffe3\013\uffe3\024\uffe3\031\uffe3\032\uffe3\033\uffe3\001" +
    "\002\000\030\005\021\006\025\007\027\010\023\011\004" +
    "\012\005\024\010\027\150\031\016\032\011\033\006\001" +
    "\002\000\032\002\uffe5\005\uffe5\006\uffe5\007\uffe5\010\uffe5" +
    "\011\uffe5\012\uffe5\013\uffe5\024\uffe5\031\uffe5\032\uffe5\033" +
    "\uffe5\001\002\000\012\005\131\014\133\025\uffe0\030\130" +
    "\001\002\000\004\025\uffde\001\002\000\004\025\uffdf\001" +
    "\002\000\004\025\155\001\002\000\040\002\uffd7\005\uffd7" +
    "\006\uffd7\007\uffd7\010\uffd7\011\uffd7\012\uffd7\013\uffd7\024" +
    "\uffd7\025\uffd7\027\uffd7\030\uffd7\031\uffd7\032\uffd7\033\uffd7" +
    "\001\002\000\004\005\021\001\002\000\004\030\160\001" +
    "\002\000\010\031\046\032\011\033\006\001\002\000\004" +
    "\025\162\001\002\000\004\026\163\001\002\000\030\005" +
    "\021\006\025\007\027\010\023\011\004\012\005\024\010" +
    "\027\164\031\016\032\011\033\006\001\002\000\034\002" +
    "\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\011\uffc3\012\uffc3" +
    "\013\uffc3\024\uffc3\027\uffc3\031\uffc3\032\uffc3\033\uffc3\001" +
    "\002\000\030\005\021\006\025\007\027\010\023\011\004" +
    "\012\005\024\010\027\166\031\016\032\011\033\006\001" +
    "\002\000\034\002\uffc4\005\uffc4\006\uffc4\007\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\024\uffc4\027\uffc4\031\uffc4\032" +
    "\uffc4\033\uffc4\001\002\000\010\031\016\032\011\033\006" +
    "\001\002\000\004\025\173\001\002\000\006\023\047\025" +
    "\172\001\002\000\034\002\uffc8\005\uffc8\006\uffc8\007\uffc8" +
    "\010\uffc8\011\uffc8\012\uffc8\013\uffc8\024\uffc8\027\uffc8\031" +
    "\uffc8\032\uffc8\033\uffc8\001\002\000\034\002\uffc7\005\uffc7" +
    "\006\uffc7\007\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\024" +
    "\uffc7\027\uffc7\031\uffc7\032\uffc7\033\uffc7\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\171\000\032\002\031\003\030\004\006\010\023\012" +
    "\014\013\016\014\017\015\011\016\025\017\027\020\012" +
    "\021\021\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\012\153\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\011\114\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\030\003\041\004\032\010\037" +
    "\012\014\013\034\014\033\015\011\016\040\017\027\020" +
    "\012\021\035\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\012\044\015\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\012\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\052\005\061\010" +
    "\057\012\014\013\055\014\054\015\011\016\060\017\027" +
    "\020\012\021\056\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\004\062\010" +
    "\067\012\014\013\064\014\065\015\011\016\070\017\027" +
    "\020\012\021\066\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\012\044\015" +
    "\072\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\052\005\076\010\057\012\014\013\055\014\054\015" +
    "\011\016\060\017\027\020\012\021\056\001\001\000\002" +
    "\001\001\000\026\004\062\010\067\012\014\013\064\014" +
    "\065\015\011\016\070\017\027\020\012\021\066\001\001" +
    "\000\002\001\001\000\004\012\101\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\007\112" +
    "\010\105\012\110\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\011\114\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\012" +
    "\121\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\010" +
    "\123\012\124\001\001\000\002\001\001\000\004\011\114" +
    "\001\001\000\002\001\001\000\004\006\131\001\001\000" +
    "\004\006\152\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\052\005" +
    "\136\010\057\012\014\013\055\014\054\015\011\016\060" +
    "\017\027\020\012\021\056\001\001\000\002\001\001\000" +
    "\026\004\062\010\067\012\014\013\064\014\065\015\011" +
    "\016\070\017\027\020\012\021\066\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\006\142\001\001\000\002" +
    "\001\001\000\002\001\001\000\030\004\052\005\146\010" +
    "\057\012\014\013\055\014\054\015\011\016\060\017\027" +
    "\020\012\021\056\001\001\000\002\001\001\000\026\004" +
    "\062\010\067\012\014\013\064\014\065\015\011\016\070" +
    "\017\027\020\012\021\066\001\001\000\002\001\001\000" +
    "\004\006\151\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\004\156\001" +
    "\001\000\002\001\001\000\006\012\044\015\160\001\001" +
    "\000\002\001\001\000\002\001\001\000\030\004\052\005" +
    "\164\010\057\012\014\013\055\014\054\015\011\016\060" +
    "\017\027\020\012\021\056\001\001\000\002\001\001\000" +
    "\026\004\062\010\067\012\014\013\064\014\065\015\011" +
    "\016\070\017\027\020\012\021\066\001\001\000\002\001" +
    "\001\000\010\012\170\013\167\015\011\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    private Symbol s;
    
    public void syntax_error(Symbol s){
        this.s = s;
    }

    public Symbol getS(){
        return this.s;
}

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {
  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // CONDITIONAL ::= If Parentesis_a OPERATION_BOOLEAN Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // CONDITIONAL ::= If Parentesis_a OPERATION_BOOLEAN Parentesis_c Llave_a BODY Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONDITIONAL",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WHILE ::= While Parentesis_a OPERATION_BOOLEAN Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WHILE ::= While Parentesis_a OPERATION_BOOLEAN Parentesis_c Llave_a BODY Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",14, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FOR ::= For Parentesis_a DECLARATIONS Op_Separator OPERATION_BOOLEAN Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOR ::= For Parentesis_a DECLARATIONS Op_Separator OPERATION_BOOLEAN Parentesis_c Llave_a BODY Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // CICLOS ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // CICLOS ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CICLOS",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // CONSOLA ::= Out Parentesis_a EXP Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSOLA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // CONSOLA ::= Out Parentesis_a VALUE Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSOLA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CONSOLA ::= In Parentesis_a VALUE Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONSOLA",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // OPERATION_BOOLEAN ::= VALUE Op_Relacional VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATION_BOOLEAN",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // EXP ::= OPERATION_BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // EXP ::= Identificador Operador_Igual OPERATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // EXP ::= Identificador Operador_Igual VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXP",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // VALUE ::= Numero_entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // VALUE ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // VALUE ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("VALUE",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // OPERATOR ::= Operador_Modulo 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // OPERATOR ::= Operador_Division 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // OPERATOR ::= Operador_Multiplicacion 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // OPERATOR ::= Operador_Resta 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // OPERATOR ::= Operador_Suma 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATOR",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // OPERATION ::= VALUE OPERATOR VALUE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // OPERATION ::= Parentesis_a VALUE Parentesis_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPERATION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // ASSIGN ::= OPERATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASSIGN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // ASSIGN ::= Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASSIGN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // ASSIGN ::= Numero_entero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASSIGN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASSIGN ::= Numero 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASSIGN",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARATIONS ::= T_dato Identificador Operador_Igual ASSIGN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARATIONS ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARATIONS",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // PARAMS ::= T_dato Identificador PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // PARAMS ::= Op_Separator PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // PARAMS ::= T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // PARAMS ::= Operador_Referencia T_dato Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // PARAMS ::= Operador_Referencia T_dato Identificador PARAMS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMS",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FUNCION ::= Fun Identificador Parentesis_a PARAMS Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FUNCION ::= Fun Identificador Parentesis_a Parentesis_c Llave_a BODY Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // FUNCION ::= Fun Identificador Parentesis_a PARAMS Parentesis_c Llave_a BODY Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // FUNCION ::= Fun Identificador Parentesis_a Parentesis_c Llave_a Llave_c 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // BODY ::= BODY OPERATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // BODY ::= BODY CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // BODY ::= BODY CONDITIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // BODY ::= BODY CONSOLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // BODY ::= BODY EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // BODY ::= BODY DECLARATIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // BODY ::= CONDITIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // BODY ::= CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // BODY ::= CONSOLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // BODY ::= OPERATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // BODY ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // BODY ::= DECLARATIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BODY",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= INICIO OPERATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= INICIO CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= INICIO CONDITIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= INICIO CONSOLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= INICIO EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= INICIO DECLARATIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= INICIO FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= CONDITIONAL 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= CICLOS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= CONSOLA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= OPERATION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= EXP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= DECLARATIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

